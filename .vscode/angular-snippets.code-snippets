{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Create three reducer functions": {
    "scope": "javascript, typescript",
    "prefix": "ngrx-reducer",
    "body": [
      "on($1.$2, (state, action) => (",
      "{",
      "  ...state,",
      "  loading: true",
      "}",
      ")),",
      "on($1.$2Success, (state, action) => {",
      "return {",
      "...state,",
      "loading: false,",
      "$0",
      "};",
      "}",
      "),",
      "on($1.$2Failure, (state, action) => ({",
      "...state,",
      "loading: false,",
      "error: action.error",
      "})),",
    ],
    "description": "Creates three reducer 'on' functions."
  },
  "Create action x_, x_Success, x_Failure": {
    "scope": "javascript, typescript",
    "prefix": "ngrx-actions",
    "body": [
      "export const $1 = createAction('[$2] $1');",
      "export const $1Success = createAction('[$2] $1Success', props<{ $0 }>());",
      "export const $1Failure = createAction('[$2] $1Failure', props<{ error: string }>());",  
    ],
    "description": ""

  }
}